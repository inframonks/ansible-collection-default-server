---
- name: Gather distribution facts
  setup:
    gather_subset:
      - '!all'
      - '!any'
      - distribution
  tags: certbot

- name: Load distribution-specific variables
  include_vars: "{{ ansible_os_family }}.yml"
  tags: certbot

- name: Fail for unsupported distributions
  fail:
    msg: "Distribution {{ ansible_os_family }} ({{ ansible_distribution }}) is not supported by this role. Supported: Debian, Ubuntu, RedHat, Rocky"
  when: ansible_os_family not in ['Debian', 'RedHat']
  tags: certbot

- name: Enable EPEL repository (RedHat family)
  package:
    name: epel-release
    state: present
  when: 
    - ansible_os_family == "RedHat"
    - certbot_enable_epel | default(false)
  tags: certbot

- name: Install Certbot and dependencies
  package:
    name: "{{ certbot_packages }}"
    state: present
    update_cache: "{{ certbot_update_cache | default(false) }}"
  tags: certbot

- name: Create Cloudflare credentials directory
  file:
    path: /etc/letsencrypt
    state: directory
    mode: '0700'
  tags: certbot

- name: Create certbot deploy hook log file
  file:
    path: /var/log/certbot-deployhook.log
    state: touch
    mode: '0644'
    owner: root
    group: root
  tags: certbot

- name: Create Cloudflare INI file
  template:
    src: cloudflare.ini.j2
    dest: "{{ certbot_cloudflare_credentials_path }}"
    mode: '0600'
  tags: certbot

- name: Copy deployhook from template
  template:
    src: deployhook.sh.j2
    dest: /etc/letsencrypt/renewal-hooks/deploy/deployhook.sh
    mode: '0755'
  loop: "{{ certbot_certs }}"
  tags: certbot

- name: Run Certbot to generate certificate
  command: >
    certbot certonly --dns-cloudflare
    --dns-cloudflare-credentials {{ certbot_cloudflare_credentials_path }}
    --dns-cloudflare-propagation-seconds 30
    --non-interactive --agree-tos
    --email {{ certbot_cloudflare_api_email }}
    --cert-name "{{ item.domains | first }}"
    --expand
    -d {{ item.domains | join(',') }}
    --deploy-hook '/etc/letsencrypt/renewal-hooks/deploy/deployhook.sh'
  loop: "{{ certbot_certs }}"
  tags: certbot
  register: certbot_output
  changed_when: "'Certificate deployed' in certbot_output.stdout"

- name: Modify Certbot renewal configuration file
  lineinfile:
    path: "/etc/letsencrypt/renewal/{{ item.domains | first }}.conf"
    regexp: '^renew_hook'
    line: renew_hook = /etc/letsencrypt/renewal-hooks/deploy/deployhook.sh
    state: present
  loop: "{{ certbot_certs }}"
  tags: certbot
